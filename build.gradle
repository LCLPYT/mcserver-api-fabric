import net.fabricmc.loom.task.RemapJarTask
import work.lclpnet.build.task.GithubDeploymentTask

plugins {
    id 'java'
    id 'fabric-loom' version '1.2.7'
    id 'maven-publish'
    id 'gradle-build-utils' version '1.5.3'
    id 'kibu-plugin-dev' version '0.6.1'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

Properties props = buildUtils.loadProperties('publish.properties')

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = project.maven_group
version = buildUtils.gitVersion()
archivesBaseName = project.archives_base_name

repositories {
    mavenCentral()

    maven {
        url "https://repo.lclpnet.work/repository/internal"
    }
}

sourceSets {
    translate

    main {
        // make translate classes available in the main sourceSet
        compileClasspath += translate.output
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "work.lclpnet.mods.kibu:kibu:${project.kibu_version}"
    modImplementation "work.lclpnet.mods.kibu:kibu-plugins:${project.kibu_plugins_version}"

    implementation 'org.json:json:20230227'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // bundle these dependencies
    'work.lclpnet:json-config4j:1.0.0'.with {
        implementation it
        bundle (it) { transitive = false }
    }

    "work.lclpnet:translations4j:${project.translations4j_version}".with {
        implementation it
        bundle (it) { transitive = false }
    }

    "work.lclpnet:lclpnetwork-api:${project.lclpnetwork_api_version}".with {
        implementation it
        bundle (it) { transitive = false }
    }

    "work.lclpnet:lclpstorage:${project.lclpstorage_version}".with {
        implementation it
        bundle (it) { transitive = false }
    }

    implementation "work.lclpnet.mcserver-api:mcserver-api-base:${project.mcserver_api_base_version}"

    // test dependencies
    testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
}

// add main dependencies to the translate sourceSet
configurations {
    translateImplementation.extendsFrom(implementation)

    translateCompileClasspath.extendsFrom(modCompileClasspathMapped)
    translateRuntimeClasspath.extendsFrom(modCompileClasspathMapped)
}

// add minecraft dependencies to activity sourceSet (only available after project evaluation)
afterEvaluate {
    configurations {
        translateCompileClasspath.extendsFrom(minecraftNamedCompile)
        translateRuntimeClasspath.extendsFrom(minecraftNamedRuntime)
    }
}

kibu {
    // add translate sources to the dev plugin loader
    pluginPaths.from(sourceSets.translate.output)
}

loom {
    serverOnlyMinecraftJar()

    runs {
        remove client
    }
}

test {
    useJUnitPlatform()
    systemProperty('fabric.side', 'server')
}

java {
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.convention(17)
}

processResources {
    // replace placeholders in resources
    inputs.property "version", project.version

    filesMatching("plugin.json") {
        expand "version": project.version
    }
}

shadowJar {
    mergeServiceFiles()
}

// add translation jar tasks
tasks.register("translationJar", Jar.class) {
    description 'Builds the standalone translation api jar.'
    group 'build'
    archiveClassifier.set("translate-dev")
    destinationDirectory.set(new File(buildDir, "devlibs"))
}

tasks.register('remapTranslationJar', RemapJarTask.class) {
    dependsOn tasks.translationJar

    description 'Remaps the built translation api jar to intermediary mappings.'
    group 'fabric'
    archiveClassifier.set('translate')

    inputFile.convention(tasks.translationJar.archiveFile)
}

[translationJar, remapTranslationJar].each {
    tasks.assemble.dependsOn(it)
}

[jar, sourcesJar, shadowJar, translationJar, remapTranslationJar].each {
    it.from("LICENSE.md") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

def env = System.getenv()

tasks.register("github", GithubDeploymentTask) {
    dependsOn tasks.shadowJar

    config {
        token = env.get("GITHUB_TOKEN")
        repository = env.get("GITHUB_REPOSITORY")
    }

    release {
        title = "[$project.minecraft_version] $project.name $project.version"
        tag = buildUtils.latestTag()
    }

    assets.add(tasks.shadowJar.archiveFile.get())
}

publishing {
    buildUtils.setupPublishRepository(repositories, props)

    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name

            artifact remapJar
            artifact remapSourcesJar
            artifact remapTranslationJar

            pom {
                name = 'MCServer Kibu Implementation'
                description = 'A Java library to manage Minecraft server backend interaction with LCLPNetwork. For Fabric/Kibu.'
            }
        }
    }
}