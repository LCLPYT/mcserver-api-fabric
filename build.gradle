plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'gradle-build-utils'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

Properties props = loadProperties.call('publish.properties')

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = gitVersion.call()
group = project.maven_group

repositories {
    mavenCentral()

    maven {
        url "https://repo.lclpnet.work/repository/internal"
    }

    maven {
        if (!Arrays.stream("mavenHost", "mavenUser", "mavenPassword").allMatch(props.&containsKey)) {
            throw new IllegalStateException('Publish properties must contain values for "mavenPassword", "mavenHost" and "mavenUser".')
        }
        credentials {
            username props.getProperty('mavenUser')
            password props.getProperty('mavenPassword')
        }
        url props.getProperty('mavenHost')
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    implementation "work.lclpnet:lclpnetwork-api:${project.lclpnetwork_api_version}"
    implementation "work.lclpnet.mcserver-api:mcserver-api-base:${project.mcserver_api_version}"
    implementation "work.lclpnet:lclpstorage:${project.lclpstorage_version}"
    implementation "work.lclpnet:translations:${project.lclptranslations_version}"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release.set(targetVersion)
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present
    withSourcesJar()
}

jar {
    from("LICENSE.md") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name

            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            pom {
                name = 'LCLPMMO'
                description = 'A mod that adds MMO RPG content to Minecraft. Indended to be used on LCLPServer 5.0'
            }
        }
    }

    repositories {
        maven {
            def env = System.getenv()
            if (Arrays.stream("DEPLOY_URL", "DEPLOY_USER", "DEPLOY_PASSWORD").allMatch(env.&containsKey)) {
                credentials {
                    username env.get("DEPLOY_USER")
                    password env.get("DEPLOY_PASSWORD")
                }
                url env.get("DEPLOY_URL")
            } else if (Arrays.stream("mavenHost", "mavenUser", "mavenPassword").allMatch(props.&containsKey)) {
                credentials {
                    username props.getProperty('mavenUser')
                    password props.getProperty('mavenPassword')
                }
                url props.getProperty('mavenHost')
            } else {
                url "file:///${project.projectDir}/repo"
            }
        }
    }
}